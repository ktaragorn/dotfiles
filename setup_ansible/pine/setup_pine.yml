# before this, setup as a server and install SSH
#http://askubuntu.com/questions/511463/can-i-convert-ubuntu-desktop-14-04-to-server
#TODO - configure openmediavault from scratch?
# create ubuntu user and home dir
# install plugins
---
- name: Generic server setup and harden ssh
  tags: basic
  hosts: all
  gather_facts: no
  become: yes
  pre_tasks:
    - name: "install python2" #https://stackoverflow.com/a/34402816 ansible still needs python 2
      raw: sudo apt-get -y install python
      register: command_result
      changed_when: '"is already the newest version" not in command_result.stdout'
  tasks:
    - name: Install pip and other tools required
      apt: pkg={{item}} state=present
      with_items:
        - python-pip
        - htop
        - git
        - jq
        - unattended-upgrades
        - ncdu
    - name: Install locate if needed
      apt: pkg=locate state=present
      notify: updatedb
    - name: Download z.sh
      get_url: url=https://raw.githubusercontent.com/rupa/z/master/z.sh dest=~/z.sh
      become: no
    - name: Activate z.sh
      lineinfile: dest=~/.bashrc line=". ~/z.sh" create=yes
      become: no
    - name: Create .ssh directory
      file: dest=/home/ubuntu/.ssh state=directory
      become: no
    - name: setup ssh keys - VM, Office, Putty, Phone Juicessh
      copy: src=files/authorized_keys dest=~/.ssh/authorized_keys
      become: no
    - name: Allow TCP forwarding to allow remote access
      lineinfile: dest=/etc/ssh/sshd_config regexp="^AllowTcpForwarding" line="AllowTcpForwarding yes" state=present
      notify: Restart ssh
    - name: Disallow password authentication
      lineinfile: dest=/etc/ssh/sshd_config regexp="^PasswordAuthentication" line="PasswordAuthentication no" state=present
      notify: Restart ssh
    - name: Disallow root SSH access
      lineinfile: dest=/etc/ssh/sshd_config regexp="^PermitRootLogin" line="PermitRootLogin no" state=present
      notify: Restart ssh
    - name: setup no password sudo
      lineinfile: "dest=/etc/sudoers state=present line='ubuntu    ALL=NOPASSWD: ALL'"
    - name: Point DNS to router
      copy:
        src: files/resolv.conf
        dest: /etc/resolv.conf
    - name: Set timezone
      timezone: name=Asia/Singapore
  handlers:
    - name: updatedb
      command: updatedb
    - name: Restart ssh
      service: name=ssh state=restarted

- name: Harddisks setup - ntfs and fstab
  become: yes
  tags: hdd
  hosts: all
  gather_facts: no
  tasks:
    - name: Install ntfs-3g and cifs-utils
      apt: pkg={{item}} state=present
      with_items:
        - ntfs-3g
        - cifs-utils
    - name: Fix permissions of /media/ubuntu to be open to all
      file: path=/media/ubuntu/ state=directory mode=755
    - name: Create mount points
      file: path=/media/ubuntu/{{item}} state=directory mode=0777
      with_items:
        - Archive
        - Chest
        - Vault
    - name: Mount the disks
      mount:
        name: /media/ubuntu/{{item.name}}
        src: LABEL={{item.name}}
        fstype: "{{item.fstype}}"
        opts: users,nofail,noauto,x-systemd.device-timeout=5,rw,noatime{{item.other_opts}}
        dump: "0"
        passno: "2"
        state: present
      with_items:
        - {
            name: Archive,
            other_opts: ",x-systemd.automount,uid=1000,gid=1000",
            fstype: ntfs,
          }
        - { name: Chest, other_opts: "", fstype: "ext4" }
        #this hack is because Chest is unstable enough that it might not be mountable
        # and the mount on boot will hang until it is, so we disable mount on boot and
        # mount it via cron here
    - name: Mount Chest after reboot
      cron:
        name: Mount Chest after reboot
        user: ubuntu
        special_time: reboot
        job: sleep 5 && mount /media/ubuntu/Chest
    - name: Mount Vault for maintenance purposes
      mount:
        path: /media/ubuntu/Vault
        src: //router/Vault # https://unix.stackexchange.com/a/152153 how did it work before..
        fstype: cifs
        state: mounted
        opts: guest,vers=1.0

- name: File sharing and SAMBA
  tags: samba
  hosts: all
  become: yes
  gather_facts: yes
  roles:
    - role: bertvv.samba
      samba_guest_account: ubuntu
      samba_shares:
        - name: Archive
          path: /media/ubuntu/Archive
          public: yes
          writable: yes
        - name: Chest
          path: /media/ubuntu/Chest
          public: yes
          writable: yes

- name: Dynamic dns for black-gate.
  tags: dyndns
  hosts: all
  gather_facts: no
  vars_files: [vars/all.yml]
  tasks:
    - name: Cron to curl privatedns
      cron:
        name: "Update dyndns for black-gate.privatedns.org"
        user: ubuntu
        special_time: hourly
        job: curl -s http://sync.afraid.org/u/{{freedns_token}}/ >> /tmp/freedns_black-gate_privatedns_org.log 2>/dev/null

- name: Deluge installation and setup with systemd
  become: yes
  tags: deluge
  hosts: all
  gather_facts: no
  vars_files: [vars/all.yml]
  vars:
    items:
      - deluged
      - deluge-web
  tasks:
    - name: Install deluged and deluged-web
      apt: pkg={{item}} state=present
      with_items: "{{items}}"
    # - name: Config if any
    - name: Delete the default service files
      file: path=/lib/systemd/system/{{item}}.service state=absent
      with_items: "{{items}}"
    - name: Copy service files
      copy: src=files/{{item}}.service dest=/etc/systemd/system/{{item}}.service
      with_items: "{{items}}"
    - name: Start and enable both services
      service: name={{item}} state=started enabled=true
      with_items: "{{items}}"
    - name: Stop deluged and deluge-web to allow for config
      service: name={{item}} state=stopped
      with_items: "{{items}}"
      changed_when: false
    - name: Add deluge thin client user to auth file
      become: no
      lineinfile: dest=~/.config/deluge/auth line={{deluge_thin_auth_line}} create=yes
      # this file is only created after first launch
    - name: Configure to allow remote access
      become: no
      lineinfile:
        dest: ~/.config/deluge/core.conf
        regexp: '"allow_remote":'
        line: '  "allow_remote": true,'
    - name: Configure to connect to default daemon
      become: no
      lineinfile:
        dest: ~/.config/deluge/web.conf
        regexp: '"default_daemon":'
        line: '  "default_daemon": "127.0.0.1:58846",'
    - name: Start deluged and deluge-web again
      service: name={{item}} state=started
      with_items: "{{items}}"
      changed_when: false

# # TODO install webmin tasks
# - name: Install webmin and configure for reverse proxy
#   become: yes
#   hosts: all
#   tags: webmin
#   gather_facts: no
#   tasks:
#     - name: Configure webmin for reverse proxy
#       lineinfile: dest=/etc/webmin/config line={{item}}
#       with_items:
#         - webprefix=/webmin
#         - webprefixnoredir=1
#         - referers=localhost
#       notify: Restart webmin
#     - name: Configure webmin's server miniserv for reverse proxy, disable ssl
#       lineinfile: dest=/etc/webmin/miniserv.conf line={{item.line}} regexp="^{{item.regex}}"
#       with_items:
#         - {line: cookiepath=/webmin, regex: cookiepath=}
#         - {line: bind=127.0.0.1, regex: bind=}
#         - {line: sockets=, regex: sockets=}
#         - {line: ssl=0, regex: ssl=\d}
#       notify: Restart webmin
#     # TODO fix initial redirect after login as in http://serverfault.com/questions/443482/proxying-webmin-with-nginx
#     #http://webmin.com/apache.html

#     # try to fix the hdd no spin down problem as per
#     # https://sourceforge.net/p/webadmin/bugs/3999/
#     # if this doesnt work, next step is to disable collection all out
#     # I also reduced the frequency to once in 30 min from once in 5
#     - name: Disable drive temperature collection in the background
#       lineinfile: dest=/etc/webmin/system-status/config line={{item}}
#       with_items:
#         - collect_notemp=1
#   handlers:
#     - name: Restart webmin
#       service: state=restarted name=webmin

- name: Nginx default site for webmin and deluge and others
  become: yes
  tags: nginx
  hosts: all
  gather_facts: no
  vars_files: [vars/all.yml]
  vars: &nginx_vars
    proxied_services:
      # - {name: webmin, port: 10000, terminate: "/", icon: "https://www.virtualmin.com/images/logos/webmin-logo.svg"}
      - name: deluge
        link_to: /deluge
        port: 8112
        terminate: "/"
        icon: "http://icons.iconarchive.com/icons/bokehlicia/alike/512/deluge-icon.png"
        proc: deluge-web
      - name: htpc
        link_to: /htpc
        port: 8085
        icon: "https://raw.githubusercontent.com/styxit/HTPC-Manager/master/interfaces/default/img/xbmc-logo.png"
        proc: htpc
      - name: kodi
        link_to: /kodi
        terminate: "/"
        port: 8080
        icon: "https://lh6.ggpht.com/RQvf62YkkS_hpGAfP2iBoT2yf7b0oohFQHhBB8Chp8nHNPSqmZgEkwwpKtqdtqQ_ZvM=w300"
        proc: kodi --headless
      - name: flexget
        link_to: /flexget
        port: 5050
        icon: "https://avatars2.githubusercontent.com/u/682553?v=3&s=400"
        proc: flexget
      - name: status
        link_to: /status
        port: 80
        icon: "https://www.ezservermonitor.com/themes/main/images/logo200.png"
      - name: OMV
        link_to: "http://omv.middle.earth"
        port: 80
        icon: "https://27jts3o00yy49vo2y30wem91-wpengine.netdna-ssl.com/wp-content/uploads/2018/06/openmediavault-300x300.png"
      - name: Hass
        link_to: "http://hass.middle.earth"
        port: 80
        icon: "https://www.home-assistant.io/images/favicon-192x192-full.png"
      - name: Retropie
        link_to: "http://retropie:8000"
        port: 80
        icon: http://icons.iconarchive.com/icons/papirus-team/papirus-apps/256/retropie-icon.png
      - name: monit
        icon: https://binarymist.files.wordpress.com/2015/06/monit.png?w=450
        link_to: /monit
        port: 2812
      # changed "server_name" in omv nginx config to omv.middle.earth and also configured the router to point that domain to the same machine
    other_services:
      - { name: Web Server, port: 80, proc: nginx }
      - { name: SSH Server, port: 22, proc: sshd }
      - { name: Samba Server, port: 445, proc: smbd }
      - {
          name: MariaDB server,
          port: 3306,
          host: pine64.middle.earth,
          proc: mysqld,
        }
      - { name: Deluged, port: 58846, proc: deluged }
      - { name: Home Assistant, port: 8123, proc: homeassistant }
  tasks:
    - name: Install nginx and php
      package: name={{item}}
      with_items:
        - nginx
        - php7.0-fpm
        - php-xml #https://stackoverflow.com/questions/35701730/utf8-endecode-removed-from-php7
    - name: Configure site
      template:
        src: files/pine.j2
        dest: /etc/nginx/sites-enabled/default
        # cant do this since the individual files are included
        # INSIDE the `http` block of the main config and so are not valid on their own
        # validate: nginx -t -c %s
      notify: Restart nginx
      tags: nginx_conf
    - name: Enable service
      service: state=started enabled=yes name=nginx
    - name: Install passlib python library
      pip: name=passlib
    - name: Create basic auth password file
      htpasswd:
        path: /etc/nginx/passwdfile
        name: "{{nginx_username}}"
        password: "{{nginx_password}}"
        group: www-data
        mode: 0640
    - name: Setup index page
      template: src=files/index.html.j2 dest=/var/www/html/index.html
  handlers:
    - name: Restart nginx
      service: state=restarted name=nginx

- name: Setup ez Server monitor
  tags: monitor
  hosts: all
  gather_facts: no
  become: yes
  vars: *nginx_vars
  tasks:
    - name: Create folder
      file:
        dest: /var/www/html/monitoring/
        state: directory
    - name: Download and unzip ez server monitor
      unarchive:
        src: http://www.ezservermonitor.com/esm-web/downloads/version/2.5
        dest: /var/www/html/monitoring
        remote_src: yes
    - name: Create a symlink
      file:
        state: link
        src: /var/www/html/monitoring/eZServerMonitor-2.5
        dest: /var/www/html/status
    - name: Grant access to the mounted disks to the nginx user (otherwise it doesnt show disk usage)
      user:
        name: www-data
        groups: disk
        append: yes
    - name: Generate and copy the config file
      template:
        src: files/esm.config.json.j2
        dest: /var/www/html/status/conf/esm.config.json
        validate: jq '' %s

- name: Install tvnamer
  tags: tvnamer
  hosts: all
  gather_facts: no
  tasks:
    - name: Install tvnamer for adhoc tv renaming
      become: yes
      pip: name=tvnamer

- name: Flexget installation and setup
  tags: flexget
  hosts: all
  vars_files: [vars/all.yml]
  gather_facts: no
  vars:
    web_root: /var/www/html/
  tasks:
    - name: Install flexget and subliminal
      become: yes
      pip: name={{item}}
      with_items:
        - flexget
        - subliminal
    - name: Create flexget config folder
      file:
        dest: ~/.config/flexget
        state: directory
    - name: Copy config file
      template:
        src: flexget/config.yml
        dest: ~/.config/flexget/config.yml
        validate: flexget -c %s check
      notify: Restart Flexget
    - name: Install deluge-client needed to add downloads
      pip: name=deluge-client
    - name: Copy flexget service file for systemd
      become: yes
      copy:
        src: flexget/flexget.service
        dest: /etc/systemd/system/flexget.service
    - name: Start and enable flexget daemon
      become: yes
      service: name=flexget state=started enabled=true
    - name: Set web password
      command: flexget web passwd {{flexget_web_password}}
  handlers:
    - name: Restart Flexget
      service: name=flexget state=restarted
      become: yes

# add this to advancedsettings.xml
# <advancedsettings>
#     <network>
#         <buffermode>1</buffermode>
#         <cachemembuffersize>41943040</cachemembuffersize>
#         <readbufferfactor>3</readbufferfactor>
#     </network>
#     <skiploopfilter>8</skiploopfilter>
#   <videodatabase>
#     <type>mysql</type>
#     <host>pine64.middle.earth</host>
#     <port>3306</port>
#     <user>kodi</user>
#     <pass>kodi</pass>
#   </videodatabase>
#   <videolibrary>
#     <importwatchedstate>true</importwatchedstate>
#     <importresumepoint>true</importresumepoint>
#   </videolibrary>
# </advancedsettings>

- name: Install & Configure mysql server
  tags: mysql
  hosts: all
  become: yes
  vars_files: [vars/all.yml]
  roles:
    - role: geerlingguy.mysql
      mysql_root_password: "{{my_mysql_root_password}}"
      mysql_users:
        - name: kodi
          password: kodi
          host: "%"
          priv: "*.*:ALL"
      mysql_packages: [mariadb-server]
      mysql_bind_address: "192.168.1.222" # update if ipaddress changes
      mysql_databases: [{ name: 1channel }]
    - role: guisea.automysqlbackup
      automysqlbackup_cron:
        minute: 30
        hour: 2
        day: "*"
        month: "*"
        weekday: "*"
      automysqlbackup_backup_directory: /var/lib/automysqlbackup
      automysqlbackup_username: kodi
      automysqlbackup_password: kodi

- name: HTPC Manager
  tags: htpc
  hosts: all
  gather_facts: no
  become: yes
  vars:
    htpc_path: /home/ubuntu/Documents/HTPC-Manager
  tasks:
    - name: Get latest htpc manager code
      git: repo=https://github.com/Hellowlol/HTPC-Manager.git dest={{htpc_path}}
      notify: restart htpc manager
      become: no
    - name: Install stuff to compile pillow
      apt:
        package:
          - libjpeg-dev
          - libfreetype6
          - libfreetype6-dev
          - zlib1g-dev
          - python-dev
    - name: Install psutil for system info and pillow for images
      pip:
        name:
          - psutil
          - pillow
    - name: It needs smartmontools installed
      apt: name=smartmontools
    - name: Push systemd service file
      template: src=files/htpc.service.j2 dest=/lib/systemd/system/htpc.service
    - name: Start and enable htpc
      service: name=htpc state=started enabled=true #daemon-reload=true
  # config
  # path to /htpc
  # enable kodi and deluge and add webmin and systeminfo
  # theme to atmosphere
  # dashboard latest tv shows, system info, disks info

  handlers:
    - name: restart htpc manager
      service: name=htpc state=restarted

# TODO undo this if needed..
# #https://software.opensuse.org/download.html?project=home%3Aemby&package=emby-server-beta
# - name: Install emby server and setup # ubuntu 16.04 method
#   tags: emby
#   hosts: all
#   gather_facts: no
#   become: yes
#   tasks:
#     # unable to install emby without this
#     - name: Add mono repo key
#       apt_key: keyserver=keyserver.ubuntu.com id=3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
#     - name: Add repo to apt
#       apt_repository:
#         repo: deb http://download.mono-project.com/repo/debian wheezy main
#         update_cache: yes
#         filename: mono-xamarin
#     - name: Add repo key to apt
#       apt_key: url=http://download.opensuse.org/repositories/home:emby/xUbuntu_16.04/Release.key
#     - name: Add repo to apt
#       apt_repository:
#         repo: deb http://download.opensuse.org/repositories/home:/emby/xUbuntu_16.04/ /
#         update_cache: yes
#         filename: emby-server-beta
#     - name: Install emby-server
#       apt: name=emby-server-beta
#     - name: Start and enable the emby server
#       service: name=emby-server state=started enabled=yes

# from https://github.com/Sonarr/Sonarr/wiki/Installation
# configuration mostly in GUI
# - Reverse proxy
# - Connect to deluge
# - Setup TV SHows
# - name: Sonarr Installation/Config
#   tags: sonarr
#   hosts: all
#   gather_facts: no
#   become: yes
#   tasks:
#     - name: Add mono & sonarr PPA key
#       apt_key:
#         keyserver: keyserver.ubuntu.com
#         id: "{{item}}"
#       with_items:
#         - FDA5DFFC #sonarr
#         - 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF #mono
#     - name: Add mono & sonarr PPA repository
#       apt_repository:
#         repo: "{{item.repo}}"
#         filename: "{{item.file}}"
#         update_cache: yes
#       with_items:
#         - {repo: "deb http://apt.sonarr.tv/ master main", file: sonarr}
#         - {repo: "deb http://download.mono-project.com/repo/ubuntu xenial main", file: mono-official}
#     - name: Install mono and Sonarr
#       apt: name={{item}}
#       with_items:
#         - libmono-cil-dev
#         - nzbdrone
#     - name: install sonarr systemd unit file
#       copy: src=files/sonarr.service dest=/etc/systemd/system/sonarr.service
#     - name: Start and enable the daemon
#       systemd: name=sonarr enabled=yes daemon_reload=yes state=started
#     # - name: Configure for reverse proxy
#     #   lineinfile

#https://docs.docker.com/engine/installation/linux/ubuntu/#install-using-the-repository
- name: Install Docker
  tags: docker
  hosts: all
  gather_facts: no
  become: yes
  tasks:
    - name: Install requirements/dependencies to access repo
      apt: name={{item}}
      with_items:
        - apt-transport-https
        - ca-certificates
        - software-properties-common
    - name: Install docker GPG key
      apt_key: url=https://download.docker.com/linux/ubuntu/gpg
    - name: Install Docker repo
      apt_repository:
        repo: deb [arch=arm64] https://download.docker.com/linux/ubuntu xenial stable
        update_cache: yes
    - name: Install docker-ce
      apt: name=docker-ce
    - name: Enable docker to start on boot
      systemd: name=docker enabled=yes
    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes
      notify: Restart Docker
    - name: Install docker python module
      pip: name=docker
  handlers:
    - name: Restart Docker
      systemd: name=docker state=restarted

- name: Install Home assistant via Docker
  tags: hass
  hosts: all
  gather_facts: no
  vars_files: [vars/all.yml]
  tasks:
    - name: Download Home assistant
      docker_image:
        name: homeassistant/aarch64-homeassistant
    - name: Make folder for Home assistant config
      file:
        path: /home/ubuntu/homeassistant_config
        recurse: yes
        state: directory
    - name: Copy config files to server
      template:
        src: files/{{item}}.j2
        dest: /home/ubuntu/homeassistant_config/{{item}}
      with_items:
        - configuration.yaml
        - automations.yaml
        - known_devices.yaml
      notify:
        - Validate config
        - Restart Home assistant
    - name: Start home assistant container
      docker_container:
        name: hass
        network_mode: host
        image: homeassistant/aarch64-homeassistant
        volumes:
          - /etc/localtime:/etc/localtime:ro
          - /home/ubuntu/homeassistant_config:/config
        published_ports:
          - 8123:8123
        restart_policy: unless-stopped
  handlers:
    - name: Validate config
      command: docker exec hass bash -l -c '/usr/local/bin/hass --script check_config -c /config'
    - name: Restart Home assistant
      docker_container:
        name: hass
        restart: yes

- name: Headless Kodi vs Docker
  tags: headless
  hosts: all
  gather_facts: no
  tasks:
    - name: Download Headless Kodi
      docker_image:
        name: lsioarmhf/kodi-headless-aarch64
    - name: Make folder for headless kodi config, and userdata below it
      file:
        path: /home/ubuntu/kodi.d/headless/userdata
        recurse: yes
        state: directory
    - name: Copy advancedsettings and sources from kodi.d folder - externally managed
      copy:
        src: ../kodi/files/{{item}}
        dest: /home/ubuntu/kodi.d/headless/userdata
      with_items:
        - advancedsettings.xml
        - sources.xml
      notify:
        - Restart Kodi
    - name: Start headless kodi container
      docker_container:
        name: kodi-headless
        image: lsioarmhf/kodi-headless-aarch64
        volumes:
          - /home/ubuntu/kodi.d/headless:/config/.kodi
        env:
          PGID: 1000
          PUID: 1000
        published_ports:
          - 8080:8080
          - 9090:9090
          - 9777:9777/udp
        restart_policy: unless-stopped
  handlers:
    - name: Restart Kodi
      docker_container:
        name: kodi-headless
        restart: yes

#https://www.htpcguides.com/add-custom-torrent-trackers-in-sonarr-using-jackett-guide/
#https://hub.docker.com/r/linuxserver/jackett/
# - name: Jackett setup via docker
#   tags: jackett
#   hosts: all
#   gather_facts: no
#   tasks:
#     - name: Download jackett docker image
#       docker_image:
#         name: lsioarmhf/jackett
#     - name: Start jackett container
#       docker_container:
#         name: jackett
#         image: lsioarmhf/jackett
#         volumes:
#           - /home/ubuntu/.config/jackett:/config
#           - /home/ubuntu/Downloads/jackett:/downloads
#           - /etc/localtime:/etc/localtime:ro
#         env:
#           PGID: 1000
#           PUID: 1000
#         restart_policy: unless-stopped
#         published_ports: 9117:9117
#     - name: Prepare for reverse proxy
#       lineinfile:
#         dest: /home/ubuntu/.config/jackett/Jackett/ServerConfig.json
#         regexp: '^  "BasePathOverride":'
#         line: '  "BasePathOverride": "/jackett"'
#         state: present

- name: Misc minor tasks
  tags: misc
  hosts: all
  vars_files: [vars/all.yml]
  gather_facts: no
  tasks:
    - name: Create command line kodi, pushbullet file, monitor file
      template: src=files/{{item}} dest=~/{{item}} mode=u+rwx
      with_items:
        - kodi
        - pushbullet
        - monitor_free_disk_space.sh
        - monitor_chest_drive.sh
        - speed_test.sh
        - monit_pushbullet
        - remount_chest_drive.sh
    - name: Create cron job to Monitor disk space and alert if low
      cron:
        name: "Monitor disk space and alert if low"
        user: ubuntu
        special_time: daily
        job: /home/ubuntu/monitor_free_disk_space.sh '/dev/sda1' '1000' >> /tmp/cron.log 2>&1
    - name: Create cron job to Monitor chest disk and alert if dead
      cron:
        name: "Monitor Chest drive and alert if dead"
        user: ubuntu
        special_time: hourly
        job: /home/ubuntu/monitor_chest_drive.sh >> /tmp/cron.log 2>&1
    - name: Create cron job to start iperf daemon
      cron:
        name: Start Iperf3 daemon
        user: ubuntu
        special_time: reboot
        job: iperf3 -sD
    - name: Create cron job to check network speed and alert if low
      cron:
        name: Check network speed and alert if low
        user: ubuntu
        special_time: daily
        job: /home/ubuntu/speed_test.sh >> /tmp/cron.log 2>&1

- name: Setup NFS
  tags: nfs
  hosts: all
  become: yes
  vars_files: [vars/all.yml]
  gather_facts: no
  tasks:
    - name: Install NFS Server
      apt: package=nfs-kernel-server
    - name: Start and enable NFS Server
      service: name=nfs-kernel-server state=started enabled=true
    - name: Configure NFS Server
      copy: src=files/exports dest=/etc/exports
      notify: Restart NFS server
  handlers:
    - name: Restart NFS server
      systemd: name=nfs-kernel-server state=restarted

- name: Setup and configure monit
  tags: monit
  hosts: all
  become: yes
  vars_files: [vars/all.yml]
  gather_facts: no
  vars:
    <<: *nginx_vars
    alert: exec /home/ubuntu/monit_pushbullet
    alert_and_stop_deluged: exec "/bin/bash -c '/home/ubuntu/monit_pushbullet && /bin/systemctl stop deluged'"
    alert_and_start_deluged: exec "/bin/bash -c '/home/ubuntu/monit_pushbullet && /bin/systemctl start deluged'"
    alert_succeeded: |
      {{alert}}
      else if succeeded then
      {{alert}}
  tasks:
    # monit was already setup by OMV, so this may not be complete
    - name: Install monit server
      apt: package=monit
    - name: Configure monit
      template:
        src: files/pine.monit.conf.j2
        dest: /etc/monit/conf.d/pine.conf
        # validate: monit -vc %s
        mode: 0700
        owner: root
      notify:
        - Validate monit config
        - Restart monit
  handlers:
    - name: Validate monit config
      command: monit -v
    - name: Restart monit
      systemd: name=monit state=restarted

- name: Setup and config Munin
  hosts: all
  become: yes
  tags: munin
  roles:
    - geerlingguy.munin
    - geerlingguy.munin-node

- name: Install progress cli tool
  hosts: all
  become: no
  tags: progress-cli
  tasks:
    - name: Install prerequisites
      become: yes
      apt:
        name:
          - libncurses5-dev
          - pkg-config
    - name: Git clone the package
      git:
        repo: https://github.com/Xfennec/progress.git
        dest: /home/ubuntu/Documents/progress
    - name: Build package
      make:
        chdir: /home/ubuntu/Documents/progress
    - name: install package
      become: yes
      make:
        chdir: /home/ubuntu/Documents/progress
        target: install
