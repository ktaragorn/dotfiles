# before this, setup as a server and install SSH
#http://askubuntu.com/questions/511463/can-i-convert-ubuntu-desktop-14-04-to-server
---
- name: Generic server setup and harden ssh
  tags: basic
  hosts: all
  gather_facts: no
  become: yes
  tasks:
    - name: Install pip and other tools required
      apt: pkg={{item}} state=present
      with_items:
        - python-pip
        - htop
        - git
    - name: Install locate if needed
      apt: pkg=locate state=present
      notify: updatedb
    - name: Download z.sh
      get_url: url=https://raw.githubusercontent.com/rupa/z/master/z.sh dest=~/Documents/z.sh
      become: no
    - name: Activate z.sh
      lineinfile: dest=~/.bashrc line=". ~/Documents/z.sh"
      become: no
    - name: setup ssh keys
      copy: src=files/authorized_keys dest=~/.ssh/authorized_keys
      become: no
    - name: Disallow password authentication
      lineinfile: dest=/etc/ssh/sshd_config regexp="^PasswordAuthentication" line="PasswordAuthentication no" state=present
      notify: Restart ssh
    - name: Disallow root SSH access
      lineinfile: dest=/etc/ssh/sshd_config regexp="^PermitRootLogin" line="PermitRootLogin no" state=present
      notify: Restart ssh
    - name: setup no password sudo
      lineinfile: "dest=/etc/sudoers state=present line='ubuntu    ALL=NOPASSWD: ALL'"
  handlers:
  - name: updatedb
    command: updatedb
  - name: Restart ssh
    service: name=ssh state=restarted

- name: Harddisks setup - ntfs and fstab
  become: yes
  tags: hdd
  hosts: all
  gather_facts: no
  tasks:
    - name: Install ntfs-3g
      apt: pkg={{item}} state=present
      with_items:
        - ntfs-3g
    - name: Create mount points
      file: path=/media/ubuntu/{{item}} state=directory
      with_items:
        - Archive
        - Chest
    - name: Mount the disks
      mount:
        name: /media/ubuntu/{{item.name}}
        src: LABEL={{item.name}}
        fstype: "{{item.fstype}}"
        opts: users,rw,noatime{{item.other_opts}}
        dump: "0"
        passno: "2"
        state: present
      with_items:
        - {name: Archive, other_opts: ,uid=1000,gid=1000, fstype: ntfs}
        - {name: Chest, other_opts: "", fstype: "ext4"}

- name: File sharing and SAMBA
  tags: samba
  hosts: all
  become: yes
  gather_facts: yes
  roles:
  - role: bertvv.samba
    samba_guest_account: ubuntu
    samba_shares:
    - name: Archive
      path: /media/ubuntu/Archive
      public: yes
      writable: yes
    - name: Chest
      path: /media/ubuntu/Chest
      public: yes
      writable: yes

- name: Dynamic dns for black-gate.
  tags: dyndns
  hosts: all
  gather_facts: no
  vars_files: [vars/all.yml]
  tasks:
  - name: Cron to curl privatedns
    cron:
      name: 'Update dyndns for black-gate.privatedns.org'
      user: ubuntu
      special_time: hourly
      job: curl -s http://sync.afraid.org/u/{{freedns_token}}/ >> /tmp/freedns_black-gate_privatedns_org.log 2>/dev/null

- name: Deluge installation and setup with systemd
  become: yes
  tags: deluge
  hosts: all
  gather_facts: no
  vars:
    items:
      - deluged
      - deluge-web
  tasks:
  - name: Install deluged and deluged-web
    apt: pkg={{item}} state=present
    with_items: '{{items}}'
  # - name: Config if any
  - name: Delete the default service files
    file: path=/lib/systemd/system/{{item}}.service state=absent
    with_items: '{{items}}'
  - name: Copy service files
    copy: src=files/{{item}}.service dest=/etc/systemd/system/{{item}}.service
    with_items: '{{items}}'
  - name: Start and enable both services
    service: name={{item}} state=started enabled=true
    with_items: '{{items}}'

- name: Deluge Thin client setup
  tags: deluge_thin
  hosts: all
  gather_facts: no
  vars_files: [vars/all.yml]
  tasks:
    - name: Add deluge thin client user to auth file
      lineinfile: dest=~/.config/deluge/auth line={{deluge_thin_auth_line}}
      notify: Restart deluge
    - name: Configure to allow remote access
      lineinfile:
        dest: ~/.config/deluge/core.conf
        regexp: '"allow_remote":'
        line: '  "allow_remote": true,'
      notify: Restart deluge
  handlers:
    - name: Restart deluge
      service: state=restarted name=deluge

# TODO install webmin tasks
- name: Install webmin and configure for reverse proxy
  become: yes
  hosts: all
  tags: webmin
  gather_facts: no
  tasks:
    - name: Configure webmin for reverse proxy
      lineinfile: dest=/etc/webmin/config line={{item}}
      with_items:
        - webprefix=/webmin
        - webprefixnoredir=1
        - referers=localhost
      notify: Restart webmin
    - name: Configure webmin's server miniserv for reverse proxy, disable ssl
      lineinfile: dest=/etc/webmin/miniserv.conf line={{item.line}} regexp="^{{item.regex}}"
      with_items:
        - {line: cookiepath=/webmin, regex: cookiepath=}
        - {line: bind=127.0.0.1, regex: bind=}
        - {line: sockets=, regex: sockets=}
        - {line: ssl=0, regex: ssl=\d}
      notify: Restart webmin
    # TODO fix initial redirect after login as in http://serverfault.com/questions/443482/proxying-webmin-with-nginx
    #http://webmin.com/apache.html

    # try to fix the hdd no spin down problem as per
    # https://sourceforge.net/p/webadmin/bugs/3999/
    # if this doesnt work, next step is to disable collection all out
    # I also reduced the frequency to once in 30 min from once in 5
    - name: Disable drive temperature collection in the background
      lineinfile: dest=/etc/webmin/system-status/config line={{item}}
      with_items:
        - collect_notemp=1
  handlers:
    - name: Restart webmin
      service: state=restarted name=webmin

- name: Nginx default site for webmin and deluge and others
  become: yes
  tags: nginx
  hosts: all
  gather_facts: no
  vars:
    proxied_services:
      - {name: webmin, port: 10000, terminate: "/", icon: "https://www.virtualmin.com/images/logos/webmin-logo.svg"}
      - {name: deluge, port: 8112, terminate: "/", icon: "http://icons.iconarchive.com/icons/bokehlicia/alike/512/deluge-icon.png"}
      - {name: htpc, port: 8085, icon: "https://raw.githubusercontent.com/styxit/HTPC-Manager/master/interfaces/default/img/xbmc-logo.png"}
      - {name: kodi, host: 192.168.1.244, terminate: "/", port: 8080, icon: "https://lh6.ggpht.com/RQvf62YkkS_hpGAfP2iBoT2yf7b0oohFQHhBB8Chp8nHNPSqmZgEkwwpKtqdtqQ_ZvM=w300"}
      - {name: flexget, port: 5050, icon: "https://avatars2.githubusercontent.com/u/682553?v=3&s=400"}
      - {name: sonarr, port: 8989, icon: "http://appv2.asustor.com/uploadIcons/0020_999_1439891916_0020_17730_1400232290_nzbDrone_icon_256x256.png"}
      - {name: jackett, port: 9117, icon: "https://avatars1.githubusercontent.com/u/15383019?v=3&s=400"}
  tasks:
  - name: Install nginx
    apt: pkg=nginx
  - name: Configure site
    template: src=files/pine.j2 dest=/etc/nginx/sites-available/default
    notify: Restart nginx
    tags: nginx_conf
  - name: Enable service
    service: state=started enabled=yes name=nginx
  - name: Setup index page
    template: src=files/index.html.j2 dest=/var/www/html/index.html
  - name: Setup links to flexget outputs
    file: src=/home/ubuntu/{{item}}.html dest=/var/www/html/{{item}}.html state=link
    with_items:
      - moved
      - downloaded
  handlers:
    - name: Restart nginx
      service: state=restarted name=nginx

- name: Install tvnamer
  tags: tvnamer
  hosts: all
  gather_facts: no
  tasks:
  - name: Install tvnamer for adhoc tv renaming
    become: yes
    pip: name=tvnamer

- name: Flexget installation and setup
  tags: flexget
  hosts: all
  vars_files: [vars/all.yml]
  gather_facts: no
  vars:
    web_root: /var/www/html/
  tasks:
  - name: Install flexget and subliminal
    become: yes
    pip: name={{item}}
    with_items:
      - flexget
      - subliminal
  - name: Copy config file
    template: src=flexget/config.yml dest=~/.config/flexget/config.yml
    notify: Restart Flexget
  - name: Copy flexget service file for systemd
    become: yes
    copy: src=flexget/flexget.service dest=/etc/systemd/system/flexget.service
  - name: Start and enable flexget daemon
    become: yes
    service: name=flexget state=started enabled=true
  - name: Set web password
    command: flexget web passwd {{flexget_web_password}}
  handlers:
    - name: Restart Flexget
      service: name=flexget state=restarted
      become: yes

# add this to advancedsettings.xml
# <advancedsettings>
#     <network>
#         <buffermode>1</buffermode>
#         <cachemembuffersize>41943040</cachemembuffersize>
#         <readbufferfactor>3</readbufferfactor>
#     </network>
#     <skiploopfilter>8</skiploopfilter>
#   <videodatabase>
#     <type>mysql</type>
#     <host>pine64.middle.earth</host>
#     <port>3306</port>
#     <user>kodi</user>
#     <pass>kodi</pass>
#   </videodatabase>
#   <videolibrary>
#     <importwatchedstate>true</importwatchedstate>
#     <importresumepoint>true</importresumepoint>
#   </videolibrary>
# </advancedsettings>

- name: Install & Configure mysql server
  tags: mysql
  hosts: all
  become: yes
  vars_files: [vars/all.yml]
  roles:
    - role: geerlingguy.mysql
      mysql_root_password: '{{my_mysql_root_password}}'
      mysql_users:
        - name: kodi
          password: kodi
          host: "%"
          priv: "*.*:ALL"
      mysql_packages: [mariadb-server]
      mysql_bind_address: '192.168.1.222' # update if ipaddress changes
      mysql_databases: [{name: 1channel}]
    - role: guisea.automysqlbackup
      automysqlbackup_cron:
        minute: 30
        hour: 2
        day: "*"
        month: "*"
        weekday: "*"
      automysqlbackup_backup_directory: /var/lib/automysqlbackup
      automysqlbackup_username: kodi
      automysqlbackup_password: kodi

- name: HTPC Manager
  tags: htpc
  hosts: all
  gather_facts: no
  become: yes
  vars:
    htpc_path: /home/ubuntu/Documents/HTPC-Manager
  tasks:
  - name: Get latest htpc manager code
    git: repo=https://github.com/Hellowlol/HTPC-Manager.git dest={{htpc_path}}
    notify: restart htpc manager
    become: no
  - name: Install stuff to compile pillow
    apt: package={{item}}
    with_items:
    - libjpeg9
    - libjpeg9-dev
    - libfreetype6
    - libfreetype6-dev
    - zlib1g-dev
  - name: Install psutil for system info and pillow for images
    pip: name={{item}}
    with_items:
    - psutil
    - pillow
  - name: Push systemd service file
    template: src=files/htpc.service.j2 dest=/lib/systemd/system/htpc.service
  - name: Start and enable htpc
    service: name=htpc state=started enabled=true #daemon-reload=true
# config
# path to /htpc
# enable kodi and deluge and add webmin and systeminfo
# theme to atmosphere
# dashboard latest tv shows, system info, disks info

  handlers:
  - name: restart htpc manager
    service: name=htpc state=restarted

# TODO undo this if needed..
# #https://software.opensuse.org/download.html?project=home%3Aemby&package=emby-server-beta
# - name: Install emby server and setup # ubuntu 16.04 method
#   tags: emby
#   hosts: all
#   gather_facts: no
#   become: yes
#   tasks:
#     # unable to install emby without this
#     - name: Add mono repo key
#       apt_key: keyserver=keyserver.ubuntu.com id=3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
#     - name: Add repo to apt
#       apt_repository:
#         repo: deb http://download.mono-project.com/repo/debian wheezy main
#         update_cache: yes
#         filename: mono-xamarin
#     - name: Add repo key to apt
#       apt_key: url=http://download.opensuse.org/repositories/home:emby/xUbuntu_16.04/Release.key
#     - name: Add repo to apt
#       apt_repository:
#         repo: deb http://download.opensuse.org/repositories/home:/emby/xUbuntu_16.04/ /
#         update_cache: yes
#         filename: emby-server-beta
#     - name: Install emby-server
#       apt: name=emby-server-beta
#     - name: Start and enable the emby server
#       service: name=emby-server state=started enabled=yes


# from https://github.com/Sonarr/Sonarr/wiki/Installation
# configuration mostly in GUI
# - Reverse proxy
# - Connect to deluge
# - Setup TV SHows
- name: Sonarr Installation/Config
  tags: sonarr
  hosts: all
  gather_facts: no
  become: yes
  tasks:
    - name: Add mono & sonarr PPA key
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: "{{item}}"
      with_items:
        - FDA5DFFC #sonarr
        - 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF #mono
    - name: Add mono & sonarr PPA repository
      apt_repository:
        repo: "{{item.repo}}"
        filename: "{{item.file}}"
        update_cache: yes
      with_items:
        - {repo: "deb http://apt.sonarr.tv/ master main", file: sonarr}
        - {repo: "deb http://download.mono-project.com/repo/ubuntu xenial main", file: mono-official}
    - name: Install mono and Sonarr
      apt: name={{item}}
      with_items:
        - libmono-cil-dev
        - nzbdrone
    - name: install sonarr systemd unit file
      copy: src=files/sonarr.service dest=/etc/systemd/system/sonarr.service
    - name: Start and enable the daemon
      systemd: name=sonarr enabled=yes daemon_reload=yes state=started
    # - name: Configure for reverse proxy
    #   lineinfile

# #https://docs.docker.com/engine/installation/linux/ubuntu/#install-using-the-repository
# - name: Install Docker
#   tags: docker
#   hosts: all
#   gather_facts: no
#   become: yes
#   tasks:
#     - name: Install requirements/dependencies to access repo
#       apt: name={{item}}
#       with_items:
#         - apt-transport-https
#         - ca-certificates
#         - software-properties-common
#     - name: Install docker GPG key
#       apt_key: url=https://download.docker.com/linux/ubuntu/gpg
#     - name: Install Docker repo
#       apt_repository:
#         repo: deb [arch=arm64] https://download.docker.com/linux/ubuntu xenial stable
#         update_cache: yes
#     - name: Install docker-ce
#       apt: name=docker-ce

- name: Install Docker
  tags: docker
  hosts: all
  gather_facts: no
  become: yes
  tasks:
    - name: Install docker.io
      apt: name=docker.io
    - name: Enable docker to start on boot
      systemd: name=docker enabled=yes
    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes
      notify: Restart Docker
  handlers:
    - name: Restart Docker
      systemd: name=docker state=restarted

#https://www.htpcguides.com/add-custom-torrent-trackers-in-sonarr-using-jackett-guide/
#https://hub.docker.com/r/linuxserver/jackett/
- name: Jackett setup via docker
  tags: jackett
  hosts: all
  gather_facts: no
  tasks:
    - name: Download jackett docker image
      docker_image:
        name: lsioarmhf/jackett
    - name: Start jackett container
      docker_container:
        name: jackett
        image: lsioarmhf/jackett
        volumes:
          - /home/ubuntu/.config/jackett:/config
          - /home/ubuntu/Downloads/jackett:/downloads
          - /etc/localtime:/etc/localtime:ro
        env:
          PGID: 1000
          PUID: 1000
        restart_policy: unless-stopped
        published_ports: 9117:9117
    - name: Prepare for reverse proxy
      lineinfile:
        dest: /home/ubuntu/.config/jackett/Jackett/ServerConfig.json
        regexp: '^  "BasePathOverride":'
        line: '  "BasePathOverride": "/jackett"'
        state: present

- name: Misc minor tasks
  tags: misc
  hosts: all
  vars_files: [vars/all.yml]
  gather_facts: no
  tasks:
    - name: Create command line kodi, pushbullet file, monitor file
      template: src=files/{{item}} dest=~/{{item}} mode=u+rwx
      with_items:
        - kodi
        - pushbullet
        - monitor_free_disk_space.sh
    - name: Create cron job to Monitor disk space and alert if low
      cron:
        name: 'Monitor disk space and alert if low'
        user: ubuntu
        special_time: daily
        job: /home/ubuntu/monitor_free_disk_space.sh '/dev/sda1' '1000'
    - name: Create cron job to start iperf daemon
      cron:
        name: Start Iperf3 daemon
        user: ubuntu
        special_time: reboot
        job: iperf3 -sD

- name: Setup NFS
  tags: nfs
  hosts: all
  become: yes
  vars_files: [vars/all.yml]
  gather_facts: no
  tasks:
    - name: Install NFS Server
      apt: package=nfs-kernel-server
    - name: Start and enable NFS Server
      service: name=nfs-kernel-server state=started enabled=true
    - name: Configure NFS Server
      copy: src=files/exports dest=/etc/exports
      notify: Restart NFS server
  handlers:
    - name: Restart NFS server
      systemd: name=nfs-kernel-server state=restarted
