# before this, setup as a server and install SSH
#http://askubuntu.com/questions/511463/can-i-convert-ubuntu-desktop-14-04-to-server
# create ubuntu user and home dir
# install plugins
# Atleast once need sudo password - use -K to request it
---
- name: Basic stuff
  hosts: all
  vars_files: vars/all.yml
  gather_facts: no
  become: yes
  tags: basic
  vars:
    user_name: ubuntu
  roles:
    - role: '../my_roles/base_server'

- name: Setup swapfile
  hosts: all
  become: yes
  tags: swap
  gather_facts: no
  vars:
    swap_file_size_mb: '1024'
  roles:
    - geerlingguy.swap

- name: Harddisks setup - ntfs and fstab
  become: yes
  tags: hdd
  hosts: all
  gather_facts: no
  tasks:
    - name: Install ntfs-3g and cifs-utils
      apt:
        pkg:
          - ntfs-3g
          - cifs-utils
    - name: Fix permissions of /media/ubuntu to be open to all
      file: path=/media/ubuntu/ state=directory mode=755
    - name: Create mount points
      file: path=/media/ubuntu/{{item}} state=directory mode=0777
      with_items:
        - Archive
        - Chest
        # - Vault
    - name: Mount the disks
      mount:
        name: /media/ubuntu/{{item.name}}
        src: LABEL={{item.name}}
        fstype: "{{item.fstype}}"
        opts: users,nofail,noauto,x-systemd.device-timeout=5,rw,noatime{{item.other_opts}}
        dump: "0"
        passno: "2"
        state: present
      with_items:
        - {
            name: Archive,
            other_opts: ",x-systemd.automount,uid=1000,gid=1000",
            fstype: ntfs,
          }
        - { name: Chest, other_opts: "", fstype: "ext4" }
        #this hack is because Chest is unstable enough that it might not be mountable
        # and the mount on boot will hang until it is, so we disable mount on boot and
        # mount it via cron here
    - name: Mount Chest after reboot
      cron:
        name: Mount Chest after reboot
        user: ubuntu
        special_time: reboot
        job: sleep 5 && mount /media/ubuntu/Chest
    - name: Mount Vault for maintenance purposes
      mount:
        path: /media/ubuntu/Vault
        src: //router/Vault # https://unix.stackexchange.com/a/152153 how did it work before..
        fstype: cifs
        state: mounted
        opts: guest,vers=1.0

- name: File sharing and SAMBA
  tags: samba
  hosts: all
  become: yes
  gather_facts: yes
  roles:
    - role: bertvv.samba
      samba_guest_account: ubuntu
      samba_shares:
        # - name: Archive
        #   path: /media/ubuntu/Archive
        #   public: yes
        #   writable: yes
        - name: Chest
          path: /media/ubuntu/Chest
          public: yes
          writable: yes
        # Failing for now, and no vault anyway
        # - name: Vault
        #   path: /media/ubuntu/Vault
        #   owner: root
        #   group: root
        #   directory_mode: 0777
        #   public: yes
        #   writable: yes

- name: Deluge installation and setup with systemd
  become: yes
  tags: deluge
  hosts: all
  gather_facts: no
  vars_files: [vars/all.yml]
  vars:
    items:
      - deluged
      - deluge-web
  tasks:
    - name: Install deluged and deluged-web
      apt: pkg={{items}} state=present
    # - name: Config if any
    - name: Delete the default service files
      file: path=/lib/systemd/system/{{item}}.service state=absent
      with_items: "{{items}}"
    - name: Copy service files
      copy: src=files/{{item}}.service dest=/etc/systemd/system/{{item}}.service
      with_items: "{{items}}"
    - name: Start and enable both services
      service: name={{item}} state=started enabled=true
      with_items: "{{items}}"
    - name: Stop deluged and deluge-web to allow for config
      service: name={{item}} state=stopped
      with_items: "{{items}}"
      changed_when: false
    - name: Add deluge thin client user to auth file
      become: no
      lineinfile: dest=~/.config/deluge/auth line={{deluge_thin_auth_line}} create=yes
      # this file is only created after first launch - for this the disks have to be mounted
    - name: Configure to allow remote access
      become: no
      lineinfile:
        dest: ~/.config/deluge/core.conf
        regexp: '"allow_remote":'
        line: '  "allow_remote": true,'
    - name: Configure to set default download location
      become: no
      lineinfile:
        dest: ~/.config/deluge/core.conf
        regexp: '"download_location":'
        line: '  "download_location": "/media/ubuntu/Chest/Torrent",'
      # similarly needs deluge-web to be started once

    # https://forum.deluge-torrent.org/viewtopic.php?t=36737
    - name: Read hostlists.conf
      shell: cat ~/.config/deluge/hostlist.conf | jq 'select(.hosts)'
      register: hostlists_txt
      become: no
    - name: save the Json data to a Variable as a Fact
      become: no
      set_fact:
        hostslist: "{{ hostlists_txt.stdout | from_json }}"
    - name: Configure to connect to default daemon
      become: no
      lineinfile:
        dest: ~/.config/deluge/web.conf
        regexp: '"default_daemon":'
        line: '  "default_daemon": "{{hostslist.hosts[0][0]}}",'
    - name: Start deluged and deluge-web again
      service: name={{item}} state=started
      with_items: "{{items}}"
      changed_when: false

# # TODO install webmin tasks
# - name: Install webmin and configure for reverse proxy
#   become: yes
#   hosts: all
#   tags: webmin
#   gather_facts: no
#   tasks:
#     - name: Configure webmin for reverse proxy
#       lineinfile: dest=/etc/webmin/config line={{item}}
#       with_items:
#         - webprefix=/webmin
#         - webprefixnoredir=1
#         - referers=localhost
#       notify: Restart webmin
#     - name: Configure webmin's server miniserv for reverse proxy, disable ssl
#       lineinfile: dest=/etc/webmin/miniserv.conf line={{item.line}} regexp="^{{item.regex}}"
#       with_items:
#         - {line: cookiepath=/webmin, regex: cookiepath=}
#         - {line: bind=127.0.0.1, regex: bind=}
#         - {line: sockets=, regex: sockets=}
#         - {line: ssl=0, regex: ssl=\d}
#       notify: Restart webmin
#     # TODO fix initial redirect after login as in http://serverfault.com/questions/443482/proxying-webmin-with-nginx
#     #http://webmin.com/apache.html

#     # try to fix the hdd no spin down problem as per
#     # https://sourceforge.net/p/webadmin/bugs/3999/
#     # if this doesnt work, next step is to disable collection all out
#     # I also reduced the frequency to once in 30 min from once in 5
#     - name: Disable drive temperature collection in the background
#       lineinfile: dest=/etc/webmin/system-status/config line={{item}}
#       with_items:
#         - collect_notemp=1
#   handlers:
#     - name: Restart webmin
#       service: state=restarted name=webmin

- name: Nginx reverse proxy for all services
  become: yes
  tags: nginx
  hosts: all
  gather_facts: no
  vars_files: [vars/all.yml]
  vars: &nginx_vars
    proxied_services:
      # - {name: webmin, port: 10000, terminate: "/", icon: "https://www.virtualmin.com/images/logos/webmin-logo.svg"}
      - name: deluge
        link_to: /deluge
        port: 8112
        terminate: "/"
        icon: "http://icons.iconarchive.com/icons/bokehlicia/alike/512/deluge-icon.png"
        proc: deluge-web
      # - name: htpc
      #   link_to: /htpc
      #   port: 8085
      #   icon: "https://raw.githubusercontent.com/styxit/HTPC-Manager/master/interfaces/default/img/xbmc-logo.png"
      #   proc: htpc
      # - name: kodi
      #   link_to: /kodi
      #   terminate: "/"
      #   port: 8080
      #   icon: "https://lh6.ggpht.com/RQvf62YkkS_hpGAfP2iBoT2yf7b0oohFQHhBB8Chp8nHNPSqmZgEkwwpKtqdtqQ_ZvM=w300"
      #   proc: kodi --headless
      - name: flexget
        link_to: /flexget
        port: 5050
        icon: "https://avatars2.githubusercontent.com/u/682553?v=3&s=400"
        proc: flexget
      - name: status
        link_to: /status
        port: 80
        icon: "https://www.ezservermonitor.com/themes/main/images/logo200.png"
      - name: Hass
        link_to: "http://hass.middle.earth"
        port: 80
        icon: "https://www.home-assistant.io/images/favicon-192x192-full.png"
      - name: Retropie
        link_to: "http://retropie:8000"
        port: 80
        icon: http://icons.iconarchive.com/icons/papirus-team/papirus-apps/256/retropie-icon.png
      - name: monit
        icon: https://binarymist.files.wordpress.com/2015/06/monit.png?w=450
        link_to: /monit
        port: 2812
      # - name: firefly
      #   icon: https://camo.githubusercontent.com/729d179402476b1dd9de4ec9f5fa5910e6bf56aa/68747470733a2f2f66697265666c792d6969692e6f72672f7374617469632f696d672f6c6f676f2d736d616c6c2d6e65772e706e67
      #   port: 80
      #   link_to: http://firefly.middle.earth
      - name: Munin
        port: 80
        link_to: /munin
        icon: https://avatars2.githubusercontent.com/u/909917?s=400&v=4
      - name: DBAdmin
        icon: https://upload.wikimedia.org/wikipedia/en/thumb/6/62/MySQL.svg/136px-MySQL.svg.png
        port: 80
        link_to: /dbadmin

      # need to also configure jellyfin https://jellyfin.org/docs/general/networking/nginx.html#nginx-with-subpath-exampleorgjellyfin
      - name: jellyfin
        icon: https://www.saashub.com/images/app/service_logos/65/4165b157fc06/large.png?1578446181
        port: 8096
        proc: jellyfin
        restart: /usr/bin/sudo -u ubuntu docker restart jellyfin
      - name: MQTTAdmin
        icon: https://hackaday.com/wp-content/uploads/2016/05/mqtt_dash.png
        port: 80
        link_to: /mqtt-admin
      - name: Uptime (external)
        icon: https://superbig.co/uploads/images/icons/icon-uptimerobot.svg
        link_to: https://stats.uptimerobot.com/Z6QJGu5Xg0
        port: 80
      - name: syncthing
        icon: https://pled.fr/wp-content/uploads/2015/04/syncthing.png
        port: 8384
        link_to: /syncthing
        proc: syncthing
        terminate: "/"
      - name: owntracks
        icon: https://avatars1.githubusercontent.com/u/6574523?s=200&v=4
        port: 8083
        link_to: /owntracks
        terminate: "/"
      - name: wireguard
        icon: https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fcodingnetworker.com%2Fthumbnails%2Fwireguard.jpeg%23floatright&f=1&nofb=1&ipt=b7ec7d556f8bb5ff65aa13823f70cf34a27d832b62ebbd83f74d49f5b8f53e05&ipo=images
        port: 51821
        subdomain: yes
        proc: wg-crypt-wg0
    linked_services: # homepage but not reverse proxy
      - name: Beszel
        icon: http://pine64.middle.earth:8090/static/favicon-green.svg
        port: 8090
        link_to: http://pine64.middle.earth:8090
        proc: beszel
    other_services:
      - { name: Web Server, port: 80, proc: nginx }
      - { name: SSH Server, port: 22, proc: sshd }
      - { name: Samba Server, port: 445, proc: smbd }
      - {
          name: MariaDB server,
          port: 3306,
          host: pine64.middle.earth,
          proc: mysqld,
        }
      - { name: Deluged, port: 58846, proc: deluged }
      - { name: Home Assistant, port: 8123, proc: homeassistant }
      - { name: MQTT Broker, port: 1883, proc: mosquitto }
      - { name: Supervisor, proc: supervisor }
      # - { name: Pihole, port: 8888, proc: pihole-FTL } # not currently using
  tasks:
    - name: Install nginx and php
      package:
        name:
          - nginx
          - php-fpm
          - php-xml #https://stackoverflow.com/questions/35701730/utf8-endecode-removed-from-php7
          - php-mysql # https://stackoverflow.com/a/47960896
    - name: Configure site
      template:
        src: files/pine.j2
        dest: /etc/nginx/sites-enabled/default
        # cant do this since the individual files are included
        # INSIDE the `http` block of the main config and so are not valid on their own
        # validate: nginx -t -c %s
      notify:
        - Validate nginx
        - Restart nginx
      tags: nginx_conf
    - name: Enable service
      service: state=started enabled=yes name=nginx
    - name: Install passlib python library
      pip: name=passlib
    - name: Create basic auth password file
      htpasswd:
        path: /etc/nginx/passwdfile
        name: "{{nginx_username}}"
        password: "{{nginx_password}}"
        group: www-data
        mode: 0640
    - name: Setup index page
      template: src=files/index.html.j2 dest=/var/www/html/index.html
      tags: index_page
    # need a folder here cuz everything else is configured as a folder in nginx and the index page also implcitly adds a trailing / at the end of the link_to
    # Ideally dont need the trailing / since nginx tries both as file and folder. But when using local tunnel from outside, the port number of the tunnel is lost.
    - name: Create db admin folder
      file:
        path: /var/www/html/dbadmin/
        state: directory
    - name: Install phpMiniAdmin
      copy:
        src: files/phpminiadmin.php
        dest: /var/www/html/dbadmin/index.php
    - name: Install mqtt-admin
      unarchive:
        src: https://github.com/hobbyquaker/mqtt-admin/releases/download/v1.0.0/mqtt-admin_1.0.0.zip
        remote_src: yes
        dest: /var/www/html/
  handlers:
    - name: Validate nginx
      shell: nginx -t -c /etc/nginx/nginx.conf
    - name: Restart nginx
      service: state=restarted name=nginx

- name: Setup ez Server monitor
  tags: monitor
  hosts: all
  gather_facts: no
  become: yes
  vars: *nginx_vars
  tasks:
    - name: Create folder
      file:
        dest: /var/www/html/monitoring/
        state: directory
    - name: Download and unzip ez server monitor
      unarchive:
        src: http://www.ezservermonitor.com/esm-web/downloads/version/2.5
        dest: /var/www/html/monitoring
        remote_src: yes
    - name: Create a symlink
      file:
        state: link
        src: /var/www/html/monitoring/eZServerMonitor-2.5
        dest: /var/www/html/status
    - name: Grant access to the mounted disks to the nginx user (otherwise it doesnt show disk usage)
      user:
        name: www-data
        groups: disk
        append: yes
    - name: Generate and copy the config file
      template:
        src: files/esm.config.json.j2
        dest: /var/www/html/status/conf/esm.config.json
        validate: jq '' %s

- name: Install tvnamer
  tags: tvnamer
  hosts: all
  gather_facts: no
  tasks:
    - name: Install tvnamer for adhoc tv renaming
      become: yes
      pip: name=tvnamer

- name: Flexget installation and setup
  tags: flexget
  hosts: all
  vars_files: [vars/all.yml]
  gather_facts: no
  vars:
    web_root: /var/www/html/
  tasks:
    - name: Install python3-dev
      become: yes
      package:
        name: python3-dev
    - name: Install flexget and subliminal
      become: yes
      pip:
        name:
          - flexget
          - subliminal
    - name: Install telegram bot
      become: yes
      pip:
        name: python-telegram-bot
        version: 12.8
    - name: Create flexget config folder
      file:
        dest: ~/.config/flexget
        state: directory
    - name: Copy config file
      template:
        src: flexget/config.yml
        dest: ~/.config/flexget/config.yml
        validate: flexget -c %s check
      notify: Restart Flexget
    - name: Install deluge-client needed to add downloads
      pip: name=deluge-client
    - name: Copy flexget service file for systemd
      become: yes
      copy:
        src: flexget/flexget.service
        dest: /etc/systemd/system/flexget.service
    - name: Start and enable flexget daemon
      become: yes
      service: name=flexget state=started enabled=true
    - name: Set web password
      command: flexget web passwd {{flexget_web_password}}
  handlers:
    - name: Restart Flexget
      service: name=flexget state=restarted
      become: yes

# add this to advancedsettings.xml
# <advancedsettings>
#     <network>
#         <buffermode>1</buffermode>
#         <cachemembuffersize>41943040</cachemembuffersize>
#         <readbufferfactor>3</readbufferfactor>
#     </network>
#     <skiploopfilter>8</skiploopfilter>
#   <videodatabase>
#     <type>mysql</type>
#     <host>pine64.middle.earth</host>
#     <port>3306</port>
#     <user>kodi</user>
#     <pass>kodi</pass>
#   </videodatabase>
#   <videolibrary>
#     <importwatchedstate>true</importwatchedstate>
#     <importresumepoint>true</importresumepoint>
#   </videolibrary>
# </advancedsettings>

# - name: Install & Configure mysql server
#   tags: mysql
#   hosts: all
#   become: yes
#   vars_files: [vars/all.yml]
#   # needed because the role include below needs ansible_os_family to be defined
#   # at some point ansible stopped gathering facts for plays not tagged to be run
#   # but they still include the roles, so it fails here
#   # when tagged with always, it runs.. always
#   pre_tasks:
#     - name: Gather facts
#       setup:
#         gather_subset: min
#       tags: always
#   roles:
#     - role: geerlingguy.mysql
#       mysql_root_password: "{{my_mysql_root_password}}"
#       mysql_root_password_update: yes
#       mysql_users:
#         - name: kodi
#           password: kodi
#           host: "%"
#           priv: "*.*:ALL"
#         - name: "{{firefly_db_username}}"
#           password: "{{firefly_db_password}}"
#           host: "%"
#           priv: "*.*:ALL"
#       mysql_packages: [mariadb-server]
#       mysql_bind_address: "192.168.1.222" # update if ipaddress changes
#       mysql_databases: [{ name: firefly }]
#     - role: guisea.automysqlbackup
#       automysqlbackup_cron:
#         minute: 30
#         day: "*"
#         month: "*"
#         weekday: "*"
#       automysqlbackup_backup_directory: /var/lib/automysqlbackup
#       automysqlbackup_username: kodi
#       automysqlbackup_password: kodi

# - name: HTPC Manager
#   tags: htpc
#   hosts: all
#   gather_facts: no
#   become: yes
#   vars:
#     htpc_path: /home/ubuntu/Documents/HTPC-Manager
#   tasks:
#     - name: Get latest htpc manager code
#       git: repo=https://github.com/Hellowlol/HTPC-Manager.git dest={{htpc_path}}
#       notify: restart htpc manager
#       become: no
#     - name: Install stuff to compile pillow
#       apt:
#         package:
#           - libjpeg-dev
#           - libfreetype6
#           - libfreetype6-dev
#           - zlib1g-dev
#           - python-dev
#     - name: Install psutil for system info and pillow for images
#       pip:
#         name:
#           - psutil
#           - pillow
#     - name: It needs smartmontools installed
#       apt: name=smartmontools
#     - name: Push systemd service file
#       template: src=files/htpc.service.j2 dest=/lib/systemd/system/htpc.service
#     - name: Start and enable htpc
#       service: name=htpc state=started enabled=true #daemon-reload=true
  # config
  # path to /htpc
  # enable kodi and deluge and add webmin and systeminfo
  # theme to atmosphere
  # dashboard latest tv shows, system info, disks info

  # handlers:
  #   - name: restart htpc manager
  #     service: name=htpc state=restarted

# TODO undo this if needed..
# #https://software.opensuse.org/download.html?project=home%3Aemby&package=emby-server-beta
# - name: Install emby server and setup # ubuntu 16.04 method
#   tags: emby
#   hosts: all
#   gather_facts: no
#   become: yes
#   tasks:
#     # unable to install emby without this
#     - name: Add mono repo key
#       apt_key: keyserver=keyserver.ubuntu.com id=3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
#     - name: Add repo to apt
#       apt_repository:
#         repo: deb http://download.mono-project.com/repo/debian wheezy main
#         update_cache: yes
#         filename: mono-xamarin
#     - name: Add repo key to apt
#       apt_key: url=http://download.opensuse.org/repositories/home:emby/xUbuntu_16.04/Release.key
#     - name: Add repo to apt
#       apt_repository:
#         repo: deb http://download.opensuse.org/repositories/home:/emby/xUbuntu_16.04/ /
#         update_cache: yes
#         filename: emby-server-beta
#     - name: Install emby-server
#       apt: name=emby-server-beta
#     - name: Start and enable the emby server
#       service: name=emby-server state=started enabled=yes

# from https://github.com/Sonarr/Sonarr/wiki/Installation
# configuration mostly in GUI
# - Reverse proxy
# - Connect to deluge
# - Setup TV SHows
# - name: Sonarr Installation/Config
#   tags: sonarr
#   hosts: all
#   gather_facts: no
#   become: yes
#   tasks:
#     - name: Add mono & sonarr PPA key
#       apt_key:
#         keyserver: keyserver.ubuntu.com
#         id: "{{item}}"
#       with_items:
#         - FDA5DFFC #sonarr
#         - 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF #mono
#     - name: Add mono & sonarr PPA repository
#       apt_repository:
#         repo: "{{item.repo}}"
#         filename: "{{item.file}}"
#         update_cache: yes
#       with_items:
#         - {repo: "deb http://apt.sonarr.tv/ master main", file: sonarr}
#         - {repo: "deb http://download.mono-project.com/repo/ubuntu xenial main", file: mono-official}
#     - name: Install mono and Sonarr
#       apt: name={{item}}
#       with_items:
#         - libmono-cil-dev
#         - nzbdrone
#     - name: install sonarr systemd unit file
#       copy: src=files/sonarr.service dest=/etc/systemd/system/sonarr.service
#     - name: Start and enable the daemon
#       systemd: name=sonarr enabled=yes daemon_reload=yes state=started
#     # - name: Configure for reverse proxy
#     #   lineinfile

#https://docs.docker.com/engine/installation/linux/ubuntu/#install-using-the-repository
- name: Install Docker
  tags: docker
  hosts: all
  gather_facts: no
  become: yes
  tasks:
    - name: Install requirements/dependencies to access repo
      apt:
        name:
          - apt-transport-https
          - ca-certificatesf
          - software-properties-common
    - name: Install docker GPG key
      apt_key: url=https://download.docker.com/linux/ubuntu/gpg
    - name: Install Docker repo
      apt_repository:
        repo: deb [arch=arm64] https://download.docker.com/linux/ubuntu xenial stable
        update_cache: yes
    - name: Install docker-ce
      apt: name=docker-ce
    - name: Enable docker to start on boot
      systemd: name=docker enabled=yes
    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes
      notify: Restart Docker
    - name: Install docker python module
      pip: name=docker
  handlers:
    - name: Restart Docker
      systemd: name=docker state=restarted

- name: Install Home assistant via Docker
  tags: hass
  hosts: all
  gather_facts: no
  vars_files: [vars/all.yml]
  tasks:
    - name: Make folder for Home assistant config
      file:
        path: /home/ubuntu/homeassistant_config
        recurse: yes
        state: directory
    - name: Generate config files to server
      template:
        src: home_assistant/{{item}}.yaml
        dest: /home/ubuntu/homeassistant_config/{{item}}.yaml
      with_items:
        - configuration
      notify:
        - Validate config
        - Restart Home assistant
    - name: Copy config files to server
      copy:
        src: home_assistant/{{item}}.yaml
        dest: /home/ubuntu/homeassistant_config/{{item}}.yaml
      with_items:
        - automations
        - themes
        - known_devices
        - scripts
        - ui-lovelace
        - customize
      notify:
        - Validate config
        - Restart Home assistant
    - name: Download and start home assistant container
      docker_container:
        name: hass
        # otherwise cant make outgoing calls, or talk to mqtt, lazy way out
        network_mode: host
        image: homeassistant/home-assistant:2024.4.0
        volumes:
          - /etc/localtime:/etc/localtime:ro
          - /home/ubuntu/homeassistant_config:/config
          # - /media/ubuntu/Archive:/Archive
          - /media/ubuntu/Chest:/Chest
        # published_ports:
        #   - 8123:8123
        restart_policy: unless-stopped
    - name: Checkout SmartIR repo
      git:
        repo: https://github.com/smartHomeHub/SmartIR.git
        dest: /tmp/smartir/
      delegate_to: localhost
    - name: Copy smart IR component
      copy:
        src: /tmp/smartir/custom_components/smartir
        dest: /home/ubuntu/homeassistant_config/custom_components/
  handlers:
    - name: Validate config
      command: docker exec hass bash -l -c '/usr/local/bin/hass --script check_config -c /config'
    - name: Restart Home assistant
      docker_container:
        name: hass
        restart: yes

# - name: Headless Kodi vs Docker
#   tags: headless
#   hosts: all
#   gather_facts: no
#   tasks:
#     - name: Download Headless Kodi
#       docker_image:
#         name: matthuisman/kodi-headless:Matrix
#     - name: Make folder for headless kodi config, and userdata below it
#       file:
#         path: /home/ubuntu/kodi.d/headless/userdata
#         recurse: yes
#         state: directory
#     - name: Copy advancedsettings and sources from kodi.d folder - externally managed
#       copy:
#         src: ../kodi/files/{{item}}
#         dest: /home/ubuntu/kodi.d/headless/userdata
#       with_items:
#         - advancedsettings.xml
#         - sources.xml
#       notify:
#         - Restart Kodi
#     - name: Start headless kodi container
#       docker_container:
#         name: kodi-headless
#         image: matthuisman/kodi-headless:Matrix
#         volumes:
#           - /home/ubuntu/kodi.d/headless:/config/.kodi
#         env:
#           PGID: "1000"
#           PUID: "1000"
#         published_ports:
#           - 8080:8080
#           - 9090:9090
#           - 9777:9777/udp
#         restart_policy: unless-stopped
#   handlers:
#     - name: Restart Kodi
#       docker_container:
#         name: kodi-headless
#         restart: yes

# - name: Install and run shadowsocks proxy
#   tags: shadowsocks
#   hosts: all
#   gather_facts: no
#   vars:
#     shadowsocks_password: just_trying
#     shadowsocks_port: 8388
#   tasks:
#     - name: Download docker image
#       docker_image: name=shadowsocks/shadowsocks-libev
#     - name: Run docker image
#       docker_container:
#         name: shadowsocks
#         image: shadowsocks/shadowsocks-libev
#         env:
#           PASSWORD: "{{shadowsocks_password}}"
#         published_ports:
#           - "{{shadowsocks_port}}:8388"
#           - "{{shadowsocks_port}}:8388/udb"
#         restart_policy: unless-stopped

#https://www.htpcguides.com/add-custom-torrent-trackers-in-sonarr-using-jackett-guide/
#https://hub.docker.com/r/linuxserver/jackett/
# - name: Jackett setup via docker
#   tags: jackett
#   hosts: all
#   gather_facts: no
#   tasks:
#     - name: Download jackett docker image
#       docker_image:
#         name: lsioarmhf/jackett
#     - name: Start jackett container
#       docker_container:
#         name: jackett
#         image: lsioarmhf/jackett
#         volumes:
#           - /home/ubuntu/.config/jackett:/config
#           - /home/ubuntu/Downloads/jackett:/downloads
#           - /etc/localtime:/etc/localtime:ro
#         env:
#           PGID: 1000
#           PUID: 1000
#         restart_policy: unless-stopped
#         published_ports: 9117:9117
#     - name: Prepare for reverse proxy
#       lineinfile:
#         dest: /home/ubuntu/.config/jackett/Jackett/ServerConfig.json
#         regexp: '^  "BasePathOverride":'
#         line: '  "BasePathOverride": "/jackett"'
#         state: present

- name: Misc minor tasks
  tags: misc
  hosts: all
  vars_files: [vars/all.yml]
  gather_facts: no
  tasks:
    - name: Create command line kodi, pushbullet file, monitor file
      template: src=scripts/{{item}} dest=~/{{item}} mode=u+rwx
      with_items:
        - kodi
        - pushbullet
        - telegram
        - mqtt_sub
        - mqtt_pub
        - monitor_free_disk_space.sh
        - monitor_chest_drive.sh
        - speed_test.sh
        - monit_pushbullet
        - remount_drive.sh
        - pushEpicGames.py
        - monitor_conntrack.sh
        - ntfy
        - flexget_adhoc
        - check_wifi.sh
        - reload_wifi.sh
    - name: Create cron job to Monitor disk space and alert if low
      cron:
        name: "Monitor disk space and alert if low"
        user: ubuntu
        special_time: daily
        job: /home/ubuntu/monitor_free_disk_space.sh '/dev/sda1' '1000' >> /tmp/cron.log 2>&1
    # - name: Create cron job to Monitor chest disk and alert if dead
    #   cron:
    #     name: "Monitor Chest drive and alert if dead"
    #     user: ubuntu
    #     special_time: hourly
    #     job: /home/ubuntu/monitor_chest_drive.sh >> /tmp/cron.log 2>&1
    - name: Create cron job to start iperf daemon
      cron:
        name: Start Iperf3 daemon
        user: ubuntu
        special_time: reboot
        job: iperf3 -sD
    - name: Create cron job to check network speed and alert if low
      cron:
        name: Check network speed and alert if low
        user: ubuntu
        special_time: daily
        job: /home/ubuntu/speed_test.sh >> /tmp/cron.log 2>&1
    - name: Create cron job to check epic games free game
      cron:
        name: Check for free epic games
        user: ubuntu
        minute: '0'
        hour: "*/4"
        job: /usr/bin/python3 /home/ubuntu/pushEpicGames.py >> /tmp/epic.log 2>&1
    # to check ` cat /proc/sys/net/netfilter/nf_conntrack_count` and `sudo conntrack -L` after installing conntrack
    # to mitigate sudo sysctl -w net.netfilter.nf_conntrack_max=8388608 (otherwise packets dropped, things slow and monit sad)
    - name: Create cron job block outbound to subnet {{item}} because they were overloading nf_conntrack (hack?)
      become: yes
      lineinfile:
        dest: /etc/rc.local
        line: /sbin/iptables -A OUTPUT -d {{item}}  -j DROP
        insertbefore: exit 0
      with_items:
        - 197.253.87.0/255.255.255.0
        - 197.253.66.0/255.255.255.0
    - name: Create cron job to check conntrack count
      become: yes
      cron:
        name: Check for abnormally high conntrack count
        user: root
        minute: '0'
        hour: "*/4"
        job: /home/ubuntu/monitor_conntrack.sh >> /tmp/cron.log 2>&1

- name: Setup NFS
  tags: nfs
  hosts: all
  become: yes
  vars_files: [vars/all.yml]
  gather_facts: no
  tasks:
    - name: Make test folder
      file: dest=/home/ubuntu/nfstest state=directory
      notify: Restart NFS server
    - name: Install NFS Server
      apt: package=nfs-kernel-server
    - name: Start and enable NFS Server
      service: name=nfs-kernel-server state=started enabled=true
    - name: Configure NFS Server
      copy: src=files/exports dest=/etc/exports
      notify: Restart NFS server
  handlers:
    - name: Restart NFS server
      systemd: name=nfs-kernel-server state=restarted

- name: Setup and configure monit
  tags: monit
  hosts: all
  become: yes
  vars_files: [vars/all.yml]
  gather_facts: no
  vars:
    <<: *nginx_vars
    fault_tolerance: for 3 times within 5 cycles
    alert: exec /home/ubuntu/monit_pushbullet
    alert_and_stop_deluged: exec "/bin/bash -c '/home/ubuntu/monit_pushbullet && /bin/systemctl stop deluged'"
    alert_and_start_deluged: exec "/bin/bash -c '/home/ubuntu/monit_pushbullet && /bin/systemctl start deluged'"
    alert_succeeded: |
      {{alert}}
      else if succeeded then
      {{alert}}
    smart_home_controllers:
      - { name: nodemcu, port_type: tcp, protocol: http }
      - { name: esp32, port_type: tcp, protocol: http }
      # - { name: blackbean1, port_type: udp } # currently not using
      - { name: d1_mini, port_type: tcp, protocol: http }
      # - { name: smart_light, port: 5577, port_type: tcp }
  tasks:
    # monit was already setup by OMV, so this may not be complete
    - name: Install monit server
      apt: package=monit
    - name: Configure monit
      template:
        src: files/pine.monit.conf.j2
        dest: /etc/monit/conf.d/pine.conf
        # validate: monit -vc %s
        mode: 0700
        owner: root
      notify:
        - Validate monit config
        - Restart monit
  handlers:
    - name: Validate monit config
      command: monit -v
    - name: Restart monit
      systemd: name=monit state=restarted

- name: Setup and config Munin
  hosts: all
  become: yes
  tags: munin
  gather_facts: no
  roles:
    - geerlingguy.munin
    - role: geerlingguy.munin-node
      munin_node_plugins:
        - name: smart_sda
          plugin: smart_
        # - name: mysql_
        # - name: mysql_queries
        # - name: mysql_slowqueries
        # - name: mysql_threads
        # - name: mysql_innodb
        # - name: mysql_bytes
        - name: samba
      munin_node_config:
        smart_*:
          user: root
          group: disk
        du_pattern_:
          user: root
          group: disk
          env.DIR: /home/ubuntu/homeassistant_config
          env.PATTERN: home-assistant_v2.db
        du_hass_db:
          user: root
          group: disk
  # needed because the role include below needs ansible_os_family to be defined
  # at some point ansible stopped gathering facts for plays not tagged to be run
  # but they still include the roles, so it fails here
  # when tagged with always, it runs.. always
  pre_tasks:
    - name: Gather facts
      setup:
        gather_subset: min
      tags: always
    - name: Install extra plugins and dependencies
      apt:
        name:
          - munin-plugins-extra # in pre tasks as this is needed for samba plugin
          - libcache-cache-perl
  tasks:
    - name: Link the munin/www folder to nginx www folder
      file:
        state: link
        src: /var/cache/munin/www
        dest: /var/www/html/munin
    - name: Copy custom plugins
      copy:
        src: munin/{{item}}
        dest: /etc/munin/plugins/{{item}}
        # should not be needed.. the files are already +x, but this suddenly doesnt seem to work
        # after the reflash of the OS, now it copies as -x
        mode: a+x
      with_items:
        - ping_smart
        - du_pattern_
        - du_hass_db
      notify: Restart node
    #https://serverfault.com/a/1005404/139750
    - name: Fix munin-node for home dir access
      lineinfile:
        dest: /lib/systemd/system/munin-node.service
        line: ProtectHome=read-only
        regexp: ProtectHome=
      notify:
        - Reload daemon
        - Restart node
  handlers:
    - name: Reload daemon
      systemd: daemon_reload=true
    - name: Restart node
      systemd: name=munin-node state=restarted

- name: Install progress cli tool
  hosts: all
  become: no
  gather_facts: no
  tags: progress-cli
  tasks:
    - name: Install prerequisites
      become: yes
      apt:
        name:
          - libncurses5-dev
          - pkg-config
    - name: Git clone the package
      git:
        repo: https://github.com/Xfennec/progress.git
        dest: /home/ubuntu/Documents/progress
    - name: Build package
      make:
        chdir: /home/ubuntu/Documents/progress
    - name: install package
      become: yes
      make:
        chdir: /home/ubuntu/Documents/progress
        target: install

# - name: Install Firefly III financial tracking system
#   hosts: all
#   tags: firefly
#   gather_facts: no
#   vars_files: [vars/all.yml]
#   tasks:
#     - name: Download Firefly docker image
#       docker_image:
#         name: jc5x/firefly-iii:latest-arm
#     - name: Create required volumes
#       docker_volume: name={{item}}
#       with_items:
#         - firefly_iii_export
#         - firefly_iii_upload
#     - name: Start Firefly III container
#       docker_container:
#         name: firefly
#         image: jc5x/firefly-iii:latest-arm
#         volumes:
#           - firefly_iii_export:/var/www/firefly-iii/storage/export
#           - firefly_iii_upload:/var/www/firefly-iii/storage/upload
#         env:
#           PGID: 1000
#           PUID: 1000
#           FF_APP_ENV: local
#           FF_APP_KEY: S0m3R@nd0mString0f32Ch@rsEx@ct1y
#           FF_DB_HOST: pine64.middle.earth
#           FF_DB_NAME: firefly
#           FF_DB_USER: "{{firefly_db_username}}"
#           FF_DB_PASSWORD: "{{firefly_db_password}}"
#         published_ports:
#           - 8008:80
#         restart_policy: unless-stopped

- name: Setup Syncthing
  hosts: all
  tags: syncthing
  become: yes
  tasks:
    - name: Add PPA key
      apt_key:
        url: https://syncthing.net/release-key.txt
    - name: Add repository
      apt_repository:
        repo: deb https://apt.syncthing.net/ syncthing stable
    - name: Install Syncthing
      apt:
        name: syncthing
    - name: Copy Systemd service
      copy:
        src: files/syncthing@.service
        dest: /etc/systemd/system/syncthing@.service
      notify: Restart Syncthing
    - name: Start and enable syncthing
      systemd:
        name: syncthing@ubuntu
        state: started
        enabled: yes
    # throws host check error without this, safe since NGINX is only accessible with password from outside
    # https://f-a.nz/dev/setup-syncthing-on-debian-server-with-nginx-reverse-proxy/
    - name: Install lxml
      pip: name=lxml
    - name: Configure Syncthing to disable insecure host checking
      become: no
      xml:
        path: .config/syncthing/config.xml
        xpath: /configuration/gui/insecureSkipHostcheck
        value: "true"
      notify: Restart Syncthing
  handlers:
    - name: Restart Syncthing
      systemd:
        name: syncthing@ubuntu
        state: restarted
        daemon-reload: yes

- name: Setup Mosquitto MQTT broker
  hosts: all
  tags: mqtt
  gather_facts: no
  vars_files: [vars/all.yml]
  tasks:
    - name: Download Image
      docker_image:
        name: eclipse-mosquitto
    - name: Make required folders
      file:
        state: directory
        dest: ~/mosquitto/{{item}}
      with_items:
        - config
        - data
        - log
    - name: Copy config file
      template:
        src: files/mosquitto.conf
        dest: ~/mosquitto/config/
      notify: Restart MQTT
    - name: Start mosquitto container
      docker_container:
        user: 1000:1000  # otherwise config folder is owned by 1883
        name: mqtt
        image: eclipse-mosquitto
        network_mode: host # because published ports didnt seem to be working
        volumes:
          - ~/mosquitto/config:/mosquitto/config
        # published_ports:
        #   - 1883:1883
        #   - 9001:9001
        restart_policy: unless-stopped
  handlers:
    - name: Restart MQTT
      docker_container:
        name: mqtt
        restart: yes

- name: Owntracks Recorder
  hosts: all
  tags: otrecorder
  gather_facts: no
  tasks:
    - name: Create folders
      file:
        dest: ~/otrecorder/{{item}}/
        state: directory
      with_items:
        - docker
        - store
        - views
    - name: Download otrecorder docker repo
      git:
        repo: https://github.com/owntracks/docker-recorder.git
        dest: ~/otrecorder/docker/
    - name: Build docker image
      docker_image:
        name: otrecorder
        build:
          pull: yes
          path: "/home/{{ansible_ssh_user}}/otrecorder/docker/" # relative path not working
        source: build
    - name: Start otrecorder container
      docker_container:
        name: otrecorder
        image: otrecorder
        network_mode: host
        env:
          OTR_HOST: 127.0.0.1
        volumes:
          - ~/otrecorder/store:/store
          - ~/otrecorder/views:/htdocs/views
        # published_ports:
        #   - 8083:8083
        restart_policy: unless-stopped
    - name: Setup views folder
      get_url:
        url: https://raw.githubusercontent.com/owntracks/recorder/master/docroot/views/{{item}}.html
        dest: ~/otrecorder/views/
      with_items:
        - leafletmap
        - vmap
    - name: Create views
      copy:
        dest: ~/otrecorder/views/{{item.name}}.json
        content: "{{item.content|to_json}}"
      with_items:
        - name: nz2020
          content:
            label: New Zealand
            user: wionacmx
            device: mia2lite
            from: 2020-01-25
            to: 2020-02-02
            page: leafletmap.html
        - name: melbourne2020
          content:
            label: Melbourne Compaany Trip Drive
            user: wionacmx
            device: mia2lite
            page: leafletmap.html
            from: 2020-03-9T23:30
            to: 2020-03-12T14:00

- name: Install and setup supervisord
  hosts: all
  gather_facts: no
  become: yes
  tags: supervisor
  tasks:
    - name: Install Supervisord
      apt: name=supervisor
    - name: Start and enable Supervisord
      service:
        name: supervisor
        state: started
        enabled: yes
    - name: Configure Supervisord
      copy:
        src: files/supervisord.conf
        dest: /etc/supervisor/conf.d/pine.conf
      notify: Restart Supervisord
  handlers:
    - name: Restart Supervisord
      service:
        name: supervisor
        state: restarted

- name: Install and run mqttwarn
  tags: mqttwarn
  hosts: all
  become: yes
  gather_facts: no
  tasks:
    - name: Install mqttwarn
      pip: name=mqttwarn
    - name: Configure mqttwarn
      copy:
        src: files/{{item}}
        dest: /home/ubuntu/{{item}}
      with_items:
        - mqttwarn.ini
        - mqttwarnfunctions.py
      notify: Restart mqttwarn
    - name: Configure supervisord
      copy:
        src: files/mqttwarn.supervisord.conf
        dest: /etc/supervisor/conf.d/mqttwarn.conf
      notify: Restart Supervisord
  handlers:
    # tried to use supervisorctl, cant seem to get it working
    - name: Restart Supervisord
      service:
        name: supervisor
        state: restarted
    - name: Restart mqttwarn
      supervisorctl:
        name: mqttwarn
        state: restarted

- name: Run mysql via docker
  tags: mysql2
  hosts: all
  gather_facts: no
  become: no
  vars_files: [vars/all.yml]
  tasks:
    - name: Create data folder
      file:
        dest: /home/ubuntu/mysql
        state: directory
    - name: Run Mysql
      docker_container:
        name: mysql
        user: 1000:1000
        image: mariadb:10.5
        published_ports:
          - 3306:3306/tcp
        volumes:
          - "./mysql/:/var/lib/mysql/"
        env:
          MYSQL_ROOT_PASSWORD: "{{my_mysql_root_password}}"
          MYSQL_DATABASE: MyVideos119
          MYSQL_USER: kodi
          MYSQL_PASSWORD: kodi
        restart_policy: unless-stopped
    - name: Install pymysql
      become: yes
      pip:
        name: pymysql
    - name: Create hass db
      become: yes
      mysql_db:
        login_user: root
        login_password: "{{my_mysql_root_password}}"
        name: hass
    - name: Create hass username, password
      become: yes
      mysql_user:
        login_user: root
        login_password: "{{my_mysql_root_password}}"
        name: hass
        password: hass

- name: Install Jellyfin
  tags: jellyfin
  hosts: all
  gather_facts: no
  become: no
  tasks:
    - name: Create volumes
      docker_volume:
        name: "{{item}}"
      with_items:
        - jellyfin-config
        - jellyfin-cache
    - name: Run jellyfin
      docker_container:
        name: jellyfin
        image: jellyfin/jellyfin
        published_ports:
          - 8096:8096/tcp
        volumes:
          - jellyfin-config:/config
          - jellyfin-cache:/cache
          - /media/ubuntu/Chest/TV Shows:/Chest
        devices: # https://jellyfin.org/docs/general/administration/hardware-acceleration.html
          # VAAPI Devices
          - /dev/dri/renderD128:/dev/dri/renderD128
          - /dev/dri/card0:/dev/dri/card0
        restart_policy: on-failure
        # restart_policy: unless-stopped

- name: Setup borg and borgmatic backups
  tags: backup
  hosts: all
  gather_facts: no
  become: no
  tasks:
    - name: Install libacl headers
      apt:
        name: libacl1-dev
      become: yes
    - name: Install borg and borgmatic
      pip:
        name:
          - borgbackup
          - borgmatic
    - name: Create borgmatic folder
      file:
        dest: ~/.config/borgmatic
        state: directory
    - name: Copy borgmatic config
      copy:
        src: files/borgmatic.yml
        dest: ~/.config/borgmatic/config.yaml
    - name: Cron job to run backup job
      cron:
        name: Run borgmatic backup
        user: ubuntu
        special_time: hourly
        job: ~/.local/bin/borgmatic --verbosity 2

- name: Install Actual-server
  tags: actual
  hosts: all
  gather_facts: no
  become: no
  tasks:
    - name: Create data folder
      file:
        dest: /home/ubuntu/actual
        state: directory
    - name: Run container
      docker_container:
        name: actual
        image: jlongster/actual-server
        volumes:
          - /home/ubuntu/actual:/data
        published_ports:
          - 5006:5006
        restart_policy: on-failure

- name: Install Wireguard
  tags: wg
  hosts: all
  gather_facts: no
  become: no
  tasks:
    - name: Run container
      docker_container:
        name: wireguard
        image: ghcr.io/wg-easy/wg-easy
        volumes:
          - ~/.wg-easy:/etc/wireguard
        env:
          'WG_HOST': 'black-gate.privatedns.org'
          'WG_PORT': '51820'
          PORT: '51821'
          WG_DEFAULT_DNS: '192.168.1.1'
        published_ports:
          - 51820:51820/udp
          - 51821:51821/tcp
        capabilities:
          - NET_ADMIN
          - SYS_MODULE
        sysctls:
          net.ipv4.conf.all.src_valid_mark: 1
          net.ipv4.ip_forward: 1
        restart_policy: unless-stopped

- name: install beszel
  tags: beszel
  hosts: all
  gather_facts: no
  tasks:
    - name: Run hub container
      docker_container:
        name: beszel
        image: henrygd/beszel
        volumes:
          - ./beszel_data:/beszel_data
        published_ports:
          - 8090:8090
        restart_policy: unless-stopped

    - name: Run agent container
      docker_container:
        name: beszel-agent
        image: henrygd/beszel-agent
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock:ro
          - /media/ubuntu/Chest:/extra-filesystems/Chest:ro

      # monitor other disks / partitions by mounting a folder in /extra-filesystems
      # - /mnt/disk1/.beszel:/extra-filesystems/disk1:ro
        network_mode: host
        restart_policy: unless-stopped
        env:
          PORT: '45678'
          KEY: 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDQFtLwFqejo7yh4Ax9/wy4Hr7TVzP84ERpKIEDrSVxJ'
