set logfile /var/log/monit.log
set httpd
     port 2812
     allow admin:monit

# Alert if disk space of root filesystem gets low
check filesystem Archive with path /media/ubuntu/Archive
  if space free < 10 GB for 5 times within 15 cycles
    then {{alert}} else if succeeded for 10 cycles then {{alert}}
# Alert if disk space of root filesystem gets low
check filesystem Chest with path /media/ubuntu/Chest
  if space usage > 99% for 5 times within 15 cycles
    then {{alert}} else if succeeded for 10 cycles then {{alert}}

check file Chest_drive with path /media/ubuntu/Chest/this_is_chest_drive
  if does not exist
  then exec "/home/ubuntu/remount_drive.sh Chest"
  else if succeeded
  then {{alert_and_start_deluged}}
  if does not exist for 2 cycles
	then {{alert_and_stop_deluged}}
  else if succeeded
  then {{alert_and_start_deluged}}

check file Archive_drive with path /media/ubuntu/Archive/this_is_archive_drive
  if does not exist
  then exec "/home/ubuntu/remount_drive.sh Archive"
  else if succeeded
  then {{alert_and_start_deluged}}
  if does not exist for 2 cycles
  then {{alert_and_stop_deluged}}
  else if succeeded
  then {{alert_and_start_deluged}}

#check file Vault_drive with path /media/ubuntu/Vault/this_is_vault_drive
#  if does not exist then
#    \{\{alert_succeeded}}


# Alert if disk space of root filesystem gets low
check filesystem rootfs2 with path /
  if space usage > 85% for 5 times within 15 cycles
    then {{alert}} else if succeeded for 10 cycles then {{alert}}

check system pine64.middle.earth
  if loadavg (1min) > 12 for 6 cycles then {{alert_succeeded}}
  if loadavg (5min) > 8 for 12 cycles then {{alert_succeeded}}
  if memory usage > 90% then {{alert_succeeded}}
  if cpu usage (user) > 95% for 2 cycles then {{alert_succeeded}}
  if cpu usage (system) > 95% for 2 cycles then {{alert_succeeded}}
  if cpu usage (wait) > 95% for 2 cycles then {{alert_succeeded}}

check file flexget.log with path /home/ubuntu/.config/flexget/flexget.log
    if content = ".*CRITICAL.*" then {{alert}}
    if content = ".*ERROR.*" then {{alert}}

check file home-assistant.log with path /home/ubuntu/homeassistant_config/home-assistant.log
    if content = ".*CRITICAL.*" then {{alert}}
    if content = ".*ERROR.*" then {{alert}}

check file cloudmqtt_bridge with path /tmp/bridge_connected_log
    if content = "0" then {{alert}}

{% for service in proxied_services + other_services if "proc" in service %}
check process pine-{{service.name|lower|replace(" ", "_")}} matching '{{service.proc}}'
  # if the server is down, it gets stuck in an infinite restart loop rather than triggering this alert
  # So have added a does not exist check which does what is expected in that case
	if failed host {{service.host|default("localhost")}} port {{service.port}} {{fault_tolerance}} then
		{{alert_succeeded}}
  if does not exist {{fault_tolerance}} then
    {{alert_succeeded}}
{% endfor %}

{% for host in smart_home_controllers %}
check host {{host.name}} with address {{host.name}}.middle.earth
  if failed port {{host.port | default (80)}} type {{host.port_type}} {% if host.protocol is defined %} protocol {{host.protocol}}{% endif %} {{fault_tolerance}} then
    {{alert_succeeded}}
  if failed ping {{fault_tolerance}} then
    {{alert_succeeded}}
{% endfor %}
