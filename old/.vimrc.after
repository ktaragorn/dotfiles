
"""""""""""""
" B A S I C
"""""""""""""
set wildmenu       " fancy command completion menu!
set showcmd        " shows incomplete command to the left of the ruler
set colorcolumn=80 " draw line at column 80

" Theme
set t_Co=256 " 256 colors
set background=dark
colorscheme grb256

"""""""""""""""""
" M A P P I N G
"""""""""""""""""
:nmap <C-N><C-N> :set invnumber<CR>  " toggle line number


"""""""""""""""""
" P L U G I N
"""""""""""""""""
let g:ctrlp_working_path_mode = 0  " CtrlP current working dir
let g:buffergator_viewport_split_policy= "T"  " Top position
let g:buffergator_split_size = 6


"""""""""""""
" Window Auto Adjust
"""""""""""""
" Enlarge current window size
set winwidth=84
" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set winheight=5
set winminheight=5
set winheight=999

"""""""""
" Rails-specific
"""""""""
map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>


"""""""""
" Rubocop
""""""""
map <leader>ru :w\|:RuboCop<cr>

" Open current directory
map <leader>d :topleft :split .<cr>

" Use Bufkill to kill current buffer
map <leader>q :BD<cr>

" Switch between last two files
nnoremap <leader><leader> <c-^>

" copy-paste from clipboard
map <leader>y "*y
map <leader>p "*p

" Can't be bothered to understand ESC vs <c-c> in insert mode
imap <c-c> <esc>
" Clear the search buffer when hitting return
"function! MapCR()
  "nnoremap <cr><cr> :nohlsearch<cr>
"endfunction
"call MapCR()

map <leader><cr> :nohlsearch<cr>

"""""""""
" Autcmd
"""""""""
augroup vimrcEx
  " Clear all autocmds in the group
  autocmd!
  autocmd FileType text setlocal textwidth=78
  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
  " Leave the return key alone when in command line windows, since it's used
  " to run commands there.
  "autocmd! CmdwinEnter * :unmap <cr><cr>
  "autocmd! CmdwinLeave * :call MapCR()
augroup END

"""""""
" Move between windows
"""""""
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Unmap invwrap to make <leader>t fast
nunmap <leader>tw

" Run test
map <leader>t :VroomRunTestFile<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPEN FILES IN DIRECTORY OF CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SWITCH BETWEEN TEST AND PRODUCTION CODE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':e ' . new_file
endfunction
function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<views\>') != -1 || match(current_file, '\<helpers\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, '\.e\?rb$', '_spec.rb', '')
    let new_file = 'spec/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction
nnoremap <leader>. :call OpenTestAlternate()<cr>

